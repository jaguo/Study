总结:
    经过了两周的学习,让我对网络有了一定的了解,非常感谢常老师对我们的指导,这两周的时间里收获了很多东西,对一些协议有来初步的了解,能够基本知道IP,TCP,UDP,HTTP数据包的内容,并且能够使用wireshark软件进行抓包,利用pcap()函数抓包.
    在刚开始的时候根本不了解网络结构,就直接开始讲网络协议,怎么抓包,只能靠自己查阅资料了解,慢慢的开始进入状态.最初的要求是能抓到包就行,学会使用pcap()等一系列的函数,学会看文档.第二步就要对抓到的东西进行分析了,pcap()抓到的包是以MAC地址开始的,|Dst_MAC|Src_MAC|协议|.最初不知道抓到一个包应该怎么分析,怎样解析里面的数据,查资料后发现能够使用结构体来完成,并且需要考虑到编译器对结构体做出的优化(字节对齐),需要使用#pragma pack(1),表明一个字节对齐从而完成了对IP,ARP包的分析.不过在验收的时候知道来也可以用指针来完成解析,使用指针对TCP,UDP的包进行了简单的分析.第二部分的内容是DNS的解析,在DNS解析的操作中使用指针操作解析,中间的难点是处理域名信息的时候可能出现偏移地址的问题.第三部分的内容是HTTP的解析,这部分内容没有做太多的功能(因为HTTP中的数据是义ASCII码的形式存放的),直接将HTTP包中的数据输出,没有进行解析.

下面是在学习中的一些知识的总结:
网络模型:
	   应用层
	      |
	   表示层
	      |
	   会话层
	      |
	   传输层
	      |
	   网络层
	      |
	  数据链路层
	      |
	   物理层
数据链路层
以太网帧头:
-----------------------------
|起始标志|MAC|MAC|(IP/ARP...)|用pcap()抓包时是以MAC地址作为开始的,这是每个数据包必须有的内容
-----------------------------

IP报文分析:
0			      15|16					31
----------------------------------------------------------------------  
版本号	|包头长	|服务类型	|	    16位报文总长度		
----------------------------------------------------------------------	
	   16位标识位		|3位标志|     13位偏移  		
----------------------------------------------------------------------	
   8位生存时间	|8位协议(tcp...)|	     CheckSum		
----------------------------------------------------------------------	
			     Src IP
----------------------------------------------------------------------
			     Dst IP
----------------------------------------------------------------------
			       选项
----------------------------------------------------------------------
			       Date
----------------------------------------------------------------------

ARP报文分析:

---------------------------------------------------------------------- 
	    硬件类型		|	       协议类型
----------------------------------------------------------------------	
硬件地址长度	|协议长度	|	OP code(请求,应答)  		
----------------------------------------------------------------------	
   8位生存时间	|8位协议(tcp...)|	     CheckSum		
----------------------------------------------------------------------	
			Sender MAC address
----------------------------------------------------------------------
			Sender IP address
----------------------------------------------------------------------
			Target MAC address
----------------------------------------------------------------------
			Target IP address
----------------------------------------------------------------------

TCP报文分析:

0			      15|16					31
----------------------------------------------------------------------  
	    Src port		|	    	Dst port	
----------------------------------------------------------------------	
	   		Sequence number
----------------------------------------------------------------------	
		     Acknowledgement number
----------------------------------------------------------------------	
offset(4)|保留(6)|	flag	|		Window
----------------------------------------------------------------------
		CheckSum	|		紧急指针
----------------------------------------------------------------------
			   选项和填充
----------------------------------------------------------------------
			       Date
----------------------------------------------------------------------
flag:
-------------------------
|URG|ACK|PSH|RST|SYN|FIN|
-------------------------
1.紧急比特URGent：当URG=1时，表明此报文应尽快传送，而不要按原来的排队顺序来传送。与“紧急指针”字段配合使用，紧急指针指出在本报文段中的紧急数据的最后一个字节的序号，使接收方可以知道紧急数据共有多长.
2.确认比特ACK：只有当ACK=1时，确认序号字段才有意义.
3.急迫比特PSH：当PSH=1时，表明请求远地TCP将本报文段立即传送给其应用层，而不要等到整个缓存都填满了之后再向上交付.
4.复位比特ReSeT：当RST=1时，表明出现严重差错，必须释放连接，然后再重建传输连接。复位比特还用来拒绝一个非法的报文段或拒绝打开一个连接.
5.同步比特SYN：在建立连接时使用，当SYN=1而ACK=0时，表明这是一个连接请求报文段。对方若同意建立连接，在发回的报文段中使SYN=1和ACK=1。因此，SYN=1表示这是一个连接请求或连接接受报文，而ACK的值用来区分是哪一种报文.
6.终止比特FINal：用来释放一个连接，当FIN=1时，表明欲发送的字节串已经发完，并要求释放传输连接.


DNS报文分析:
0			      15|16					31
----------------------------------------------------------------------  ^
	        标示		|		标志			|
----------------------------------------------------------------------	|
	       问题数		|	       资源记录数		12 bytes
----------------------------------------------------------------------	|
	   授权资源记录数	|	     额外资源记录数		|
-------------------------------------------------------------------------	
			     查询问题	
----------------------------------------------------------------------
			       回答
----------------------------------------------------------------------
			       授权
----------------------------------------------------------------------
			     额外信息
----------------------------------------------------------------------

标志（2字节）：这部分非常重要，需要逐比特分析.

  ----------------------------------
  |QR|Opcode|AA|TC|RD|(Zero)|recode|
  ----------------------------------
   1   4     1  1  1    3      4   (bit)
   0... .... .... .... =QR
   .000 0... .... .... =opcode
   .... .0.. .... .... =AA
   .... ..0. .... .... =TC
   .... ...1 .... .... =RD
   .... .... 1... .... =RA
   .... .... .000 .... =zero
   .... .... .... 0000 =recode



    QR(1比特）：查询/响应的标志位，1为响应，0为查询。
    opcode（4比特）：定义查询或响应的类型（若为0则表示是标准的，若为1则是反向的，若为2则是服务器状态请求）。
    AA（1比特）：授权回答的标志位。该位在响应报文中有效，1表示名字服务器是权限服务器（关于权限服务器以后再讨论）
    TC（1比特）：截断标志位。1表示响应已超过512字节并已被截断（依稀好像记得哪里提过这个截断和UDP有关，先记着）
    RD（1比特）：该位为1表示客户端希望得到递归回答（递归以后再讨论）
    RA（1比特）：只能在响应报文中置为1，表示可以得到递归响应。
    zero（3比特）：不说也知道都是0了，保留字段。
    rcode（4比特）：返回码，表示响应的差错状态，通常为0和3，各取值含义如下：
		0          无差错
		1          格式差错
		2          问题在域名服务器上
		3          域参照问题
		4          查询类型不支持
		5          在管理上被禁止
		6          -- 15 保留
    查询名部分长度不定，一般为要查询的域名（也会有IP的时候，即反向查询）。此部分由一个或者多个标示符序列组成，每个标示符以首字节数的计数值来说明该标示符长度，每个名字以0结束。计数字节数必须是0~63之间。
该字段无需填充字节。还是借个例子来说明更直观些，查询名为gemini.tuc.noao.edu的话，查询名字段如下：
-------------------------------------------
|6|g|e|m|i|n|i|3|t|u|c|4|n|o|a|o|3|e|d|u|0|
-------------------------------------------
 |             |       |         |       |
计数          计数    计数      计数     计数

HTTP报文分析:
请求消息:Method Request-URL HTTP-Version
常用Method:OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE
响应消息:HTTP-Version Status-Code Reason-Phrase
  1xx:信息响应类，表示接收到请求并且继续处理
　　2xx:处理成功响应类，表示动作被成功接收、理解和接受
　　3xx:重定向响应类，为了完成指定的动作，必须接受进一步处理
　　4xx:客户端错误，客户请求包含语法错误或者是不能正确执行
　　5xx:服务端错误，服务器不能正确执行一个正确的请求

通常报文头以/r/n/r/n结束

























